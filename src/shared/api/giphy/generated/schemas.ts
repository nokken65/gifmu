/**
 * Generated by orval v6.19.0 üç∫
 * Do not edit manually.
 * Giphy API
 * Giphy API
 * OpenAPI spec version: 1.0
 */
import { z as zod } from 'zod'

/**
 * A multiget version of the get GIF by ID endpoint.

 * @summary Get GIFs by ID
 */
export const getGifsByIdQueryParams = zod.object({
  ids: zod.string().optional()
})

export const getGifsByIdResponse = zod.object({
  data: zod
    .array(
      zod.object({
        bitly_url: zod.string().optional(),
        content_url: zod.string().optional(),
        create_datetime: zod.string().optional(),
        embded_url: zod.string().optional(),
        featured_tags: zod.array(zod.string()).optional(),
        id: zod.string().optional(),
        images: zod
          .object({
            downsized: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            downsized_large: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            downsized_medium: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            downsized_small: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            downsized_still: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_height: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_height_downsampled: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_height_small: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_height_small_still: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_height_still: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_width: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_width_downsampled: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_width_small: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_width_small_still: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_width_still: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            looping: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            original: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            original_still: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            preview: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            preview_gif: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional()
          })
          .optional(),
        import_datetime: zod.string().optional(),
        rating: zod.string().optional(),
        slug: zod.string().optional(),
        source: zod.string().optional(),
        source_post_url: zod.string().optional(),
        source_tld: zod.string().optional(),
        tags: zod.array(zod.string()).optional(),
        trending_datetime: zod.string().optional(),
        type: zod.enum(['gif']).optional(),
        update_datetime: zod.string().optional(),
        url: zod.string().optional(),
        user: zod
          .object({
            avatar_url: zod.string().optional(),
            banner_url: zod.string().optional(),
            display_name: zod.string().optional(),
            profile_url: zod.string().optional(),
            twitter: zod.string().optional(),
            username: zod.string().optional()
          })
          .optional(),
        username: zod.string().optional()
      })
    )
    .optional(),
  meta: zod
    .object({
      msg: zod.string().optional(),
      response_id: zod.string().optional(),
      status: zod.number().optional()
    })
    .optional(),
  pagination: zod
    .object({
      count: zod.number().optional(),
      offset: zod.number().optional(),
      total_count: zod.number().optional()
    })
    .optional()
})

/**
 * Returns a random GIF, limited by tag. Excluding the tag parameter will return a random GIF from the GIPHY catalog.

 * @summary Random GIF
 */
export const randomGifQueryParams = zod.object({
  tag: zod.string().optional(),
  rating: zod.string().optional()
})

export const randomGifResponse = zod.object({
  data: zod
    .object({
      bitly_url: zod.string().optional(),
      content_url: zod.string().optional(),
      create_datetime: zod.string().optional(),
      embded_url: zod.string().optional(),
      featured_tags: zod.array(zod.string()).optional(),
      id: zod.string().optional(),
      images: zod
        .object({
          downsized: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          downsized_large: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          downsized_medium: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          downsized_small: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          downsized_still: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_height: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_height_downsampled: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_height_small: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_height_small_still: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_height_still: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_width: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_width_downsampled: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_width_small: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_width_small_still: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_width_still: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          looping: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          original: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          original_still: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          preview: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          preview_gif: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional()
        })
        .optional(),
      import_datetime: zod.string().optional(),
      rating: zod.string().optional(),
      slug: zod.string().optional(),
      source: zod.string().optional(),
      source_post_url: zod.string().optional(),
      source_tld: zod.string().optional(),
      tags: zod.array(zod.string()).optional(),
      trending_datetime: zod.string().optional(),
      type: zod.enum(['gif']).optional(),
      update_datetime: zod.string().optional(),
      url: zod.string().optional(),
      user: zod
        .object({
          avatar_url: zod.string().optional(),
          banner_url: zod.string().optional(),
          display_name: zod.string().optional(),
          profile_url: zod.string().optional(),
          twitter: zod.string().optional(),
          username: zod.string().optional()
        })
        .optional(),
      username: zod.string().optional()
    })
    .optional(),
  meta: zod
    .object({
      msg: zod.string().optional(),
      response_id: zod.string().optional(),
      status: zod.number().optional()
    })
    .optional()
})

/**
 * Search all GIPHY GIFs for a word or phrase. Punctuation will be stripped and ignored.  Use a plus or url encode for phrases. Example paul+rudd, ryan+gosling or american+psycho.

 * @summary Search GIFs
 */
export const searchGifsQueryParams = zod.object({
  q: zod.string(),
  limit: zod.number().optional(),
  offset: zod.number().optional(),
  rating: zod.string().optional(),
  lang: zod.string().optional()
})

export const searchGifsResponse = zod.object({
  data: zod
    .array(
      zod.object({
        bitly_url: zod.string().optional(),
        content_url: zod.string().optional(),
        create_datetime: zod.string().optional(),
        embded_url: zod.string().optional(),
        featured_tags: zod.array(zod.string()).optional(),
        id: zod.string().optional(),
        images: zod
          .object({
            downsized: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            downsized_large: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            downsized_medium: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            downsized_small: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            downsized_still: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_height: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_height_downsampled: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_height_small: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_height_small_still: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_height_still: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_width: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_width_downsampled: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_width_small: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_width_small_still: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_width_still: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            looping: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            original: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            original_still: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            preview: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            preview_gif: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional()
          })
          .optional(),
        import_datetime: zod.string().optional(),
        rating: zod.string().optional(),
        slug: zod.string().optional(),
        source: zod.string().optional(),
        source_post_url: zod.string().optional(),
        source_tld: zod.string().optional(),
        tags: zod.array(zod.string()).optional(),
        trending_datetime: zod.string().optional(),
        type: zod.enum(['gif']).optional(),
        update_datetime: zod.string().optional(),
        url: zod.string().optional(),
        user: zod
          .object({
            avatar_url: zod.string().optional(),
            banner_url: zod.string().optional(),
            display_name: zod.string().optional(),
            profile_url: zod.string().optional(),
            twitter: zod.string().optional(),
            username: zod.string().optional()
          })
          .optional(),
        username: zod.string().optional()
      })
    )
    .optional(),
  meta: zod
    .object({
      msg: zod.string().optional(),
      response_id: zod.string().optional(),
      status: zod.number().optional()
    })
    .optional(),
  pagination: zod
    .object({
      count: zod.number().optional(),
      offset: zod.number().optional(),
      total_count: zod.number().optional()
    })
    .optional()
})

/**
 * The translate API draws on search, but uses the GIPHY `special sauce` to handle translating from one vocabulary to another. In this case, words and phrases to GIF

 * @summary Translate phrase to GIF
 */
export const translateGifQueryParams = zod.object({
  s: zod.string()
})

export const translateGifResponse = zod.object({
  data: zod
    .object({
      bitly_url: zod.string().optional(),
      content_url: zod.string().optional(),
      create_datetime: zod.string().optional(),
      embded_url: zod.string().optional(),
      featured_tags: zod.array(zod.string()).optional(),
      id: zod.string().optional(),
      images: zod
        .object({
          downsized: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          downsized_large: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          downsized_medium: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          downsized_small: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          downsized_still: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_height: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_height_downsampled: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_height_small: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_height_small_still: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_height_still: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_width: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_width_downsampled: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_width_small: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_width_small_still: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_width_still: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          looping: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          original: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          original_still: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          preview: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          preview_gif: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional()
        })
        .optional(),
      import_datetime: zod.string().optional(),
      rating: zod.string().optional(),
      slug: zod.string().optional(),
      source: zod.string().optional(),
      source_post_url: zod.string().optional(),
      source_tld: zod.string().optional(),
      tags: zod.array(zod.string()).optional(),
      trending_datetime: zod.string().optional(),
      type: zod.enum(['gif']).optional(),
      update_datetime: zod.string().optional(),
      url: zod.string().optional(),
      user: zod
        .object({
          avatar_url: zod.string().optional(),
          banner_url: zod.string().optional(),
          display_name: zod.string().optional(),
          profile_url: zod.string().optional(),
          twitter: zod.string().optional(),
          username: zod.string().optional()
        })
        .optional(),
      username: zod.string().optional()
    })
    .optional(),
  meta: zod
    .object({
      msg: zod.string().optional(),
      response_id: zod.string().optional(),
      status: zod.number().optional()
    })
    .optional()
})

/**
 * Fetch GIFs currently trending online. Hand curated by the GIPHY editorial team.  The data returned mirrors the GIFs showcased on the GIPHY homepage. Returns 25 results by default.

 * @summary Trending GIFs
 */
export const trendingGifsQueryParams = zod.object({
  limit: zod.number().optional(),
  offset: zod.number().optional(),
  rating: zod.string().optional()
})

export const trendingGifsResponse = zod.object({
  data: zod
    .array(
      zod.object({
        bitly_url: zod.string().optional(),
        content_url: zod.string().optional(),
        create_datetime: zod.string().optional(),
        embded_url: zod.string().optional(),
        featured_tags: zod.array(zod.string()).optional(),
        id: zod.string().optional(),
        images: zod
          .object({
            downsized: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            downsized_large: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            downsized_medium: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            downsized_small: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            downsized_still: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_height: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_height_downsampled: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_height_small: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_height_small_still: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_height_still: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_width: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_width_downsampled: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_width_small: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_width_small_still: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_width_still: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            looping: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            original: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            original_still: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            preview: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            preview_gif: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional()
          })
          .optional(),
        import_datetime: zod.string().optional(),
        rating: zod.string().optional(),
        slug: zod.string().optional(),
        source: zod.string().optional(),
        source_post_url: zod.string().optional(),
        source_tld: zod.string().optional(),
        tags: zod.array(zod.string()).optional(),
        trending_datetime: zod.string().optional(),
        type: zod.enum(['gif']).optional(),
        update_datetime: zod.string().optional(),
        url: zod.string().optional(),
        user: zod
          .object({
            avatar_url: zod.string().optional(),
            banner_url: zod.string().optional(),
            display_name: zod.string().optional(),
            profile_url: zod.string().optional(),
            twitter: zod.string().optional(),
            username: zod.string().optional()
          })
          .optional(),
        username: zod.string().optional()
      })
    )
    .optional(),
  meta: zod
    .object({
      msg: zod.string().optional(),
      response_id: zod.string().optional(),
      status: zod.number().optional()
    })
    .optional(),
  pagination: zod
    .object({
      count: zod.number().optional(),
      offset: zod.number().optional(),
      total_count: zod.number().optional()
    })
    .optional()
})

/**
 * Returns a GIF given that GIF's unique ID

 * @summary Get GIF by Id
 */
export const getGifByIdParams = zod.object({
  gifId: zod.number()
})

export const getGifByIdResponse = zod.object({
  data: zod
    .object({
      bitly_url: zod.string().optional(),
      content_url: zod.string().optional(),
      create_datetime: zod.string().optional(),
      embded_url: zod.string().optional(),
      featured_tags: zod.array(zod.string()).optional(),
      id: zod.string().optional(),
      images: zod
        .object({
          downsized: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          downsized_large: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          downsized_medium: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          downsized_small: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          downsized_still: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_height: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_height_downsampled: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_height_small: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_height_small_still: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_height_still: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_width: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_width_downsampled: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_width_small: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_width_small_still: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_width_still: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          looping: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          original: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          original_still: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          preview: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          preview_gif: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional()
        })
        .optional(),
      import_datetime: zod.string().optional(),
      rating: zod.string().optional(),
      slug: zod.string().optional(),
      source: zod.string().optional(),
      source_post_url: zod.string().optional(),
      source_tld: zod.string().optional(),
      tags: zod.array(zod.string()).optional(),
      trending_datetime: zod.string().optional(),
      type: zod.enum(['gif']).optional(),
      update_datetime: zod.string().optional(),
      url: zod.string().optional(),
      user: zod
        .object({
          avatar_url: zod.string().optional(),
          banner_url: zod.string().optional(),
          display_name: zod.string().optional(),
          profile_url: zod.string().optional(),
          twitter: zod.string().optional(),
          username: zod.string().optional()
        })
        .optional(),
      username: zod.string().optional()
    })
    .optional(),
  meta: zod
    .object({
      msg: zod.string().optional(),
      response_id: zod.string().optional(),
      status: zod.number().optional()
    })
    .optional()
})

/**
 * Returns a random GIF, limited by tag. Excluding the tag parameter will return a random GIF from the GIPHY catalog.

 * @summary Random Sticker
 */
export const randomStickerQueryParams = zod.object({
  tag: zod.string().optional(),
  rating: zod.string().optional()
})

export const randomStickerResponse = zod.object({
  data: zod
    .object({
      bitly_url: zod.string().optional(),
      content_url: zod.string().optional(),
      create_datetime: zod.string().optional(),
      embded_url: zod.string().optional(),
      featured_tags: zod.array(zod.string()).optional(),
      id: zod.string().optional(),
      images: zod
        .object({
          downsized: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          downsized_large: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          downsized_medium: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          downsized_small: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          downsized_still: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_height: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_height_downsampled: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_height_small: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_height_small_still: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_height_still: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_width: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_width_downsampled: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_width_small: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_width_small_still: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_width_still: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          looping: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          original: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          original_still: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          preview: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          preview_gif: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional()
        })
        .optional(),
      import_datetime: zod.string().optional(),
      rating: zod.string().optional(),
      slug: zod.string().optional(),
      source: zod.string().optional(),
      source_post_url: zod.string().optional(),
      source_tld: zod.string().optional(),
      tags: zod.array(zod.string()).optional(),
      trending_datetime: zod.string().optional(),
      type: zod.enum(['gif']).optional(),
      update_datetime: zod.string().optional(),
      url: zod.string().optional(),
      user: zod
        .object({
          avatar_url: zod.string().optional(),
          banner_url: zod.string().optional(),
          display_name: zod.string().optional(),
          profile_url: zod.string().optional(),
          twitter: zod.string().optional(),
          username: zod.string().optional()
        })
        .optional(),
      username: zod.string().optional()
    })
    .optional(),
  meta: zod
    .object({
      msg: zod.string().optional(),
      response_id: zod.string().optional(),
      status: zod.number().optional()
    })
    .optional()
})

/**
 * Replicates the functionality and requirements of the classic GIPHY search, but returns animated stickers rather than GIFs.

 * @summary Search Stickers
 */
export const searchStickersQueryParams = zod.object({
  q: zod.string(),
  limit: zod.number().optional(),
  offset: zod.number().optional(),
  rating: zod.string().optional(),
  lang: zod.string().optional()
})

export const searchStickersResponse = zod.object({
  data: zod
    .array(
      zod.object({
        bitly_url: zod.string().optional(),
        content_url: zod.string().optional(),
        create_datetime: zod.string().optional(),
        embded_url: zod.string().optional(),
        featured_tags: zod.array(zod.string()).optional(),
        id: zod.string().optional(),
        images: zod
          .object({
            downsized: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            downsized_large: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            downsized_medium: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            downsized_small: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            downsized_still: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_height: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_height_downsampled: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_height_small: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_height_small_still: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_height_still: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_width: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_width_downsampled: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_width_small: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_width_small_still: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_width_still: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            looping: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            original: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            original_still: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            preview: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            preview_gif: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional()
          })
          .optional(),
        import_datetime: zod.string().optional(),
        rating: zod.string().optional(),
        slug: zod.string().optional(),
        source: zod.string().optional(),
        source_post_url: zod.string().optional(),
        source_tld: zod.string().optional(),
        tags: zod.array(zod.string()).optional(),
        trending_datetime: zod.string().optional(),
        type: zod.enum(['gif']).optional(),
        update_datetime: zod.string().optional(),
        url: zod.string().optional(),
        user: zod
          .object({
            avatar_url: zod.string().optional(),
            banner_url: zod.string().optional(),
            display_name: zod.string().optional(),
            profile_url: zod.string().optional(),
            twitter: zod.string().optional(),
            username: zod.string().optional()
          })
          .optional(),
        username: zod.string().optional()
      })
    )
    .optional(),
  meta: zod
    .object({
      msg: zod.string().optional(),
      response_id: zod.string().optional(),
      status: zod.number().optional()
    })
    .optional(),
  pagination: zod
    .object({
      count: zod.number().optional(),
      offset: zod.number().optional(),
      total_count: zod.number().optional()
    })
    .optional()
})

/**
 * The translate API draws on search, but uses the GIPHY `special sauce` to handle translating from one vocabulary to another. In this case, words and phrases to GIFs.

 * @summary Translate phrase to Sticker
 */
export const translateStickerQueryParams = zod.object({
  s: zod.string()
})

export const translateStickerResponse = zod.object({
  data: zod
    .object({
      bitly_url: zod.string().optional(),
      content_url: zod.string().optional(),
      create_datetime: zod.string().optional(),
      embded_url: zod.string().optional(),
      featured_tags: zod.array(zod.string()).optional(),
      id: zod.string().optional(),
      images: zod
        .object({
          downsized: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          downsized_large: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          downsized_medium: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          downsized_small: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          downsized_still: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_height: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_height_downsampled: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_height_small: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_height_small_still: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_height_still: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_width: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_width_downsampled: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_width_small: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_width_small_still: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          fixed_width_still: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          looping: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          original: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          original_still: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          preview: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional(),
          preview_gif: zod
            .object({
              frames: zod.string().optional(),
              height: zod.string().optional(),
              mp4: zod.string().optional(),
              mp4_size: zod.string().optional(),
              size: zod.string().optional(),
              url: zod.string().optional(),
              webp: zod.string().optional(),
              webp_size: zod.string().optional(),
              width: zod.string().optional()
            })
            .and(zod.any())
            .optional()
        })
        .optional(),
      import_datetime: zod.string().optional(),
      rating: zod.string().optional(),
      slug: zod.string().optional(),
      source: zod.string().optional(),
      source_post_url: zod.string().optional(),
      source_tld: zod.string().optional(),
      tags: zod.array(zod.string()).optional(),
      trending_datetime: zod.string().optional(),
      type: zod.enum(['gif']).optional(),
      update_datetime: zod.string().optional(),
      url: zod.string().optional(),
      user: zod
        .object({
          avatar_url: zod.string().optional(),
          banner_url: zod.string().optional(),
          display_name: zod.string().optional(),
          profile_url: zod.string().optional(),
          twitter: zod.string().optional(),
          username: zod.string().optional()
        })
        .optional(),
      username: zod.string().optional()
    })
    .optional(),
  meta: zod
    .object({
      msg: zod.string().optional(),
      response_id: zod.string().optional(),
      status: zod.number().optional()
    })
    .optional()
})

/**
 * Fetch Stickers currently trending online. Hand curated by the GIPHY editorial team. Returns 25 results by default.

 * @summary Trending Stickers
 */
export const trendingStickersQueryParams = zod.object({
  limit: zod.number().optional(),
  offset: zod.number().optional(),
  rating: zod.string().optional()
})

export const trendingStickersResponse = zod.object({
  data: zod
    .array(
      zod.object({
        bitly_url: zod.string().optional(),
        content_url: zod.string().optional(),
        create_datetime: zod.string().optional(),
        embded_url: zod.string().optional(),
        featured_tags: zod.array(zod.string()).optional(),
        id: zod.string().optional(),
        images: zod
          .object({
            downsized: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            downsized_large: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            downsized_medium: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            downsized_small: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            downsized_still: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_height: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_height_downsampled: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_height_small: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_height_small_still: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_height_still: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_width: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_width_downsampled: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_width_small: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_width_small_still: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            fixed_width_still: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            looping: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            original: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            original_still: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            preview: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional(),
            preview_gif: zod
              .object({
                frames: zod.string().optional(),
                height: zod.string().optional(),
                mp4: zod.string().optional(),
                mp4_size: zod.string().optional(),
                size: zod.string().optional(),
                url: zod.string().optional(),
                webp: zod.string().optional(),
                webp_size: zod.string().optional(),
                width: zod.string().optional()
              })
              .and(zod.any())
              .optional()
          })
          .optional(),
        import_datetime: zod.string().optional(),
        rating: zod.string().optional(),
        slug: zod.string().optional(),
        source: zod.string().optional(),
        source_post_url: zod.string().optional(),
        source_tld: zod.string().optional(),
        tags: zod.array(zod.string()).optional(),
        trending_datetime: zod.string().optional(),
        type: zod.enum(['gif']).optional(),
        update_datetime: zod.string().optional(),
        url: zod.string().optional(),
        user: zod
          .object({
            avatar_url: zod.string().optional(),
            banner_url: zod.string().optional(),
            display_name: zod.string().optional(),
            profile_url: zod.string().optional(),
            twitter: zod.string().optional(),
            username: zod.string().optional()
          })
          .optional(),
        username: zod.string().optional()
      })
    )
    .optional(),
  meta: zod
    .object({
      msg: zod.string().optional(),
      response_id: zod.string().optional(),
      status: zod.number().optional()
    })
    .optional(),
  pagination: zod
    .object({
      count: zod.number().optional(),
      offset: zod.number().optional(),
      total_count: zod.number().optional()
    })
    .optional()
})
